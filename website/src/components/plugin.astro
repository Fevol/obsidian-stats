---
// import PluginDataFile from '../../../plugin-data.json' assert { type: 'json' };
import GithubLink from './githubLink.astro';
import Commit from './commit.astro';
import Aside from './aside.astro';
import PluginDownloadChart from './svelte/pluginDownloadChart.svelte';
import { getPluginDownloadsWeekly } from '../../../src/plugin/data';
import { PluginDataInterface } from '../../../src/plugin/plugin';

const { plugin } = Astro.props as { plugin: PluginDataInterface };
const pluginDownloadData = getPluginDownloadsWeekly([plugin]);

const latestReleaseDateString = plugin.versionHistory.at(-1).initialReleaseDate;
const latestReleaseDate = new Date(latestReleaseDateString);

const outdatedDangerThreshold = new Date();
outdatedDangerThreshold.setFullYear(outdatedDangerThreshold.getFullYear() - 1)
const outdatedDanger = latestReleaseDate < outdatedDangerThreshold && !plugin.removedCommit;

const outdatedWarningThreshold = new Date();
outdatedWarningThreshold.setDate(outdatedWarningThreshold.getDate() - 120)
const outdatedWarning = latestReleaseDate < outdatedWarningThreshold && !outdatedDanger && !plugin.removedCommit;



---

{
	plugin.removedCommit && (
		<Aside variant="danger" title="Plugin has been Removed">
			<p>
				This plugin has been removed from the community list on <Commit commit={plugin.removedCommit} /> and can no longer be installed.
			</p>
		</Aside>
	)
}

{
	outdatedWarning && (
		<Aside variant="caution" title="Inactivity Warning">
			<p>
				The latest version of this plugin was released on the {latestReleaseDateString} and is thus more than 120 days old.
			</p>
		</Aside>
	)
}

{
	outdatedDanger && (
		<Aside variant="danger" title="Inactivity Danger">
			<p>
				The latest version of this plugin was released on the {latestReleaseDateString} and is thus more than a year old.
				There is a high chance that this plugin is no longer maintained.
			</p>
		</Aside>
	)
}

<table>
	<tbody>
		<tr>
			<td>ID</td>
			<td>{plugin.id}</td>
		</tr>
		<tr>
			<td>Name</td>
			<td>{plugin.currentEntry.name}</td>
		</tr>
		<tr>
			<td>Author</td>
			<td>{plugin.currentEntry.author}</td>
		</tr>
		<tr>
			<td>Description</td>
			<td>{plugin.currentEntry.description}</td>
		</tr>
		<tr>
			<td>GitHub Repo</td>
			<td><GithubLink repo={plugin.currentEntry.repo} /></td>
		</tr>
        <tr>
            <td>ObsidianAddict Link</td>
            <td><a href={"https://obsidianaddict.com/plugin/" + plugin.id + "/"} target="_blank">Visit on ObsidianAddict</a></td>
        </tr>
		<tr>
			<td>Official Release Date</td>
			<td><Commit commit={plugin.addedCommit} /></td>
		</tr>
	</tbody>
</table>

<h2>Changes</h2>

<table>
	<thead>
		<tr>
			<th>Date</th>
			<th>Changed Property</th>
			<th>Old Value</th>
			<th>New Value</th>
		</tr>
	</thead>
	<tbody>
		{
			plugin.changeHistory.map(change => (
				<tr>
					<td>
						<Commit commit={change.commit} />
					</td>
					<td>{change.property}</td>
					<td>{change.oldValue}</td>
					<td>{change.newValue}</td>
				</tr>
			))
		}
	</tbody>
</table>

<h2>Downloads</h2>

<PluginDownloadChart dataPoints={pluginDownloadData} client:only="svelte" />

<h2>Version History</h2>

<table>
	<thead>
		<tr>
			<th>Version</th>
			<th>Release Date</th>
		</tr>
	</thead>
	<tbody>
		{
			plugin.versionHistory.map(version => (
				<tr>
					<td>{version.version}</td>
					<td>{version.initialReleaseDate}</td>
				</tr>
			))
		}
	</tbody>
</table>
