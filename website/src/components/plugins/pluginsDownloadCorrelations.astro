---
import { getDownloadReleaseCorrelationDataPoints } from '../../../../src/plugin/data';
import PluginDownloadsNameCorrelationChart from '../svelte/pluginDownloadsNameCorrelationChart.svelte';
import PluginReleaseCountDownloadsCorrelationChart from '../svelte/pluginReleaseCountDownloadsCorrelationChart.svelte';
import PluginReleaseTimeDownloadsCorrelationChart from '../svelte/pluginReleaseTimeDownloadsCorrelationChart.svelte';
import BarChart from '../svelte/genericCharts/barChart.svelte';
import { getPluginData, groupBy } from '../../../../src/utils';
import { CDate } from '../../../../src/date';
import { getRepoData } from '../../utils/base';
import type { PluginWarning } from '../../../../src/pluginRepo/types';

const downloadReleaseCorrelationDataPoints = getDownloadReleaseCorrelationDataPoints(getPluginData());

const sortedData = downloadReleaseCorrelationDataPoints.slice().sort((a, b) => a.downloads - b.downloads);

const pluginData = getPluginData();

const now = new Date();
const lastUpdateInfo = pluginData
	.map(x => {
		if (x.versionHistory.length === 0) {
			return {
				value: 0,
				label: x.id,
			};
		}

		const lastUpdate = x.versionHistory.sort((a, b) => b.initialReleaseDate.localeCompare(a.initialReleaseDate))[0];
		const date = new Date(lastUpdate.initialReleaseDate);
		const dayDiff = Math.round((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
		return {
			value: dayDiff,
			label: x.id,
		};
	})
	.sort((a, b) => b.value - a.value);

const pluginDataGroupedByReleaseMonth = groupBy(pluginData, x => {
	const date = CDate.fromString(x.addedCommit.date);
	return date.toMonthString();
});

const repoData = await getRepoData();
const repoDataMap = new Map(repoData.map(x => [x.id, x]));

const warningPercentByReleaseMonth = Object.entries(pluginDataGroupedByReleaseMonth)
	.map(([month, plugins]) => {
		let total = plugins.length;
		let warningCounts: Record<PluginWarning['id'], number> = {
			'inactivity-12-months': 0,
			'inactivity-24-months': 0,
			removed: 0,
			'mismatched-license': 0,
			'no-license': 0,
			unlicensed: 0,
			'mismatched-manifest-data': 0,
		};

		for (const plugin of plugins) {
			const repo = repoDataMap.get(plugin.id)!;

			for (const warning of repo.warnings) {
				warningCounts[warning.id] += 1;
			}
		}

		const warningPercent: Record<PluginWarning['id'], number> = Object.fromEntries(
			Object.entries(warningCounts).map(([key, value]) => {
				return [key, value / total];
			}),
		) as Record<PluginWarning['id'], number>;

		return {
			month,
			warningPercent,
		};
	})
	.sort((a, b) => a.month.localeCompare(b.month));
---
