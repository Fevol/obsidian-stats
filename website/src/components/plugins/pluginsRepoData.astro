---
import { PluginRepoData } from '../../../../src/pluginRepo/types';
import PieChart from '../svelte/genericCharts/pieChart.svelte';
import BarChart from '../svelte/genericCharts/barChart.svelte';
import fs from 'node:fs/promises';
import { arrayIntersect, groupBy, multiGroupBy } from '../../../../src/utils';
import { Licenses } from '../../../../src/license';
import { BASE_PATH, projectRelativeUrl } from '../../utils/base';

const url = projectRelativeUrl('../pluginRepos/data/');
const repoDataFiles = await fs.readdir(url);
const repoData: PluginRepoData[] = await Promise.all(
	repoDataFiles.map(async file => {
		const content = await fs.readFile(new URL(`./${file}`, url), 'utf-8');
		return JSON.parse(content);
	}),
);
const totalPluginCount = repoData.length;

const licenceInfo = groupBy(repoData, x => {
	if (x.license === null || x.license === undefined || x.license === '') {
		return 'undefined';
	}

	const lowerCaseLicense = x.license.toLowerCase();

	if (lowerCaseLicense.includes('mit')) {
		return 'MIT';
	}

	if (lowerCaseLicense.includes('see license')) {
		return 'undefined';
	}

	if (lowerCaseLicense.includes('agpl') && lowerCaseLicense.includes('3')) {
		return 'AGPL-3.0';
	}

	if (lowerCaseLicense.includes('gpl') && lowerCaseLicense.includes('3')) {
		return 'GPL-3.0';
	}

	if (lowerCaseLicense.includes('gnu') && lowerCaseLicense.includes('3')) {
		return 'GPL-3.0';
	}

	if (lowerCaseLicense.includes('agpl') && lowerCaseLicense.includes('2')) {
		return 'AGPL-2.0';
	}

	if (lowerCaseLicense.includes('gpl') && lowerCaseLicense.includes('2')) {
		return 'GPL-2.0';
	}

	if (lowerCaseLicense.includes('gnu') && lowerCaseLicense.includes('2')) {
		return 'GPL-2.0';
	}

	if (lowerCaseLicense.includes('gnu') || lowerCaseLicense.includes('gpl')) {
		return 'GPL-2.0';
	}

	if (lowerCaseLicense.includes('apache') && lowerCaseLicense.includes('2')) {
		return 'Apache-2.0';
	}

	if (lowerCaseLicense.includes('apache')) {
		return 'Apache-2.0';
	}

	return x.license;
});
const licenceChartInfo = Object.entries(licenceInfo)
	.map(([key, value]) => {
		if (key === 'undefined') {
			key = 'Unknown License';
		}
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const licenceChartSmallInfo = Object.entries(licenceInfo)
	.map(([key, value]) => {
		if (key === 'undefined') {
			return undefined;
		}
		if (value.length < 50) {
			return {
				label: key,
				value: value.length,
			};
		}
		return undefined;
	})
	.filter(x => x !== undefined)
	.sort((a, b) => b.value - a.value);

const licensePermissions: Record<string, number> = {};
const licenseConditions: Record<string, number> = {};
const licenseLimitations: Record<string, number> = {};

const licenses: Licenses = JSON.parse(await fs.readFile(projectRelativeUrl('../licenses.json'), 'utf-8'));

for (const permission of licenses.permissions) {
	licensePermissions[permission] = 0;
}

for (const condition of licenses.conditions) {
	licenseConditions[condition] = 0;
}

for (const limitation of licenses.limitations) {
	licenseLimitations[limitation] = 0;
}

for (const li of licenceChartInfo) {
	const license = licenses.licenses.find(x => x['spdx-id'] === li.label);
	if (license !== undefined) {
		for (const permission of license.permissions) {
			licensePermissions[permission] += li.value;
		}

		for (const condition of license.conditions) {
			licenseConditions[condition] += li.value;
		}

		for (const limitation of license.limitations) {
			licenseLimitations[limitation] += li.value;
		}
	}
}

const permissionsLabels = Object.keys(licensePermissions).map(x => licenses.descriptions.permissions.find(y => y.tag === x)!.label);
const conditionsLabels = Object.keys(licenseConditions).map(x => licenses.descriptions.conditions.find(y => y.tag === x)!.label);
const limitaionsLabels = Object.keys(licenseLimitations).map(x => licenses.descriptions.limitations.find(y => y.tag === x)!.label);

const packageManagerInfo = groupBy(repoData, x => x.packageManager);
const packageManagerChartInfo = Object.entries(packageManagerInfo)
	.map(([key, value]) => {
		if (key === 'undefined') {
			key = 'No Lockfile found';
		}
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

// const usesTsInfo = groupBy(repoData, x => x.usesTypescript.toString());
// const usesTsChartInfo = Object.entries(usesTsInfo)
// 	.map(([key, value]) => {
// 		return {
// 			label: key,
// 			value: value.length,
// 		};
// 	})
// 	.sort((a, b) => a.label.length - b.label.length);

const installedBundlersInfo = multiGroupBy(repoData, x => {
	return x.installedBundlers;
});
const installedBundlersChartInfo = Object.entries(installedBundlersInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const installedTestingFrameworksInfo = multiGroupBy(repoData, x => {
	return x.installedTestingFrameworks;
});

const installedTestingFrameworksChartInfo = Object.entries(installedTestingFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);
const noTestingFrameworkCount = repoData.filter(x => x.installedTestingFrameworks.length === 0).length;

const frontendFrameworks = ['react', 'preact', 'svelte', 'vue', '@angular/core', 'solid-js'];
const installedFrontendFrameworksInfo = multiGroupBy(repoData, x => {
	return arrayIntersect([...x.dependencies, ...x.devDependencies], frontendFrameworks);
});

const installedFrontendFrameworksChartInfo = Object.entries(installedFrontendFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const noFrontendFrameworkCount = repoData.filter(x => arrayIntersect([...x.dependencies, ...x.devDependencies], frontendFrameworks).length === 0).length;

const installedToolingFrameworksInfo = multiGroupBy(repoData, x => {
	const allDeps = [...x.dependencies, ...x.devDependencies];
	const result = new Set<string>();

	if (allDeps.some(x => x.includes('eslint'))) {
		result.add('eslint');
	}

	if (allDeps.some(x => x.includes('prettier'))) {
		result.add('prettier');
	}

	if (allDeps.some(x => x.includes('@biomejs'))) {
		result.add('biome');
	}

	if (allDeps.some(x => x.includes('dprint'))) {
		result.add('dprint');
	}

	if (x.usesTypescript) {
		result.add('typescript');
	}

	return Array.from(result);
});

const installedToolingFrameworksChartInfo = Object.entries(installedToolingFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const mostUsedDepsInfo = multiGroupBy(repoData, x => {
	return [...x.dependencies, ...x.devDependencies];
});

const mostUsedDepsChartInfo = Object.entries(mostUsedDepsInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const limitedMostUsedDepsChartInfo = mostUsedDepsChartInfo.filter(x => x.value >= 10);

const hasBetaManifestInfo = groupBy(repoData, x => x.hasBetaManifest.toString());
const hasBetaManifestChartInfo = Object.entries(hasBetaManifestInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => a.label.length - b.label.length);
---

<h3>License Usage</h3>

<p>The licenses of plugins are processed to collapse synonyms for the same license into one.</p>

<p>
	The following chart shows the distribution of licenses in the plugins. The licenses are based on the licenses that are mentioned in the plugins <code
		>package.json</code
	> files.
</p>

<!--<PieChart dataPoints={licenceChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={licenceChartInfo.map(x => x.value)}
	labels={licenceChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<p>Licenses with more than 50 plugins and unknown licenses are not shown in the chart below.</p>

<!--<PieChart dataPoints={licenceChartSmallInfo} isPercentual={false} client:only="svelte" />-->
<BarChart
	dataPoints={licenceChartSmallInfo.map(x => x.value)}
	labels={licenceChartSmallInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h3>License Terms</h3>

<p>The following charts show the distribution of license terms in the plugins. The terms are based on the licenses shown in the charts above.</p>

<h4>Permissions</h4>

<p>A number of plugins give the following permissions.</p>

<BarChart
	dataPoints={Object.values(licensePermissions)}
	labels={permissionsLabels}
	isPercentual={false}
	aspectRatio={2}
	logScale={false}
	seriesName="Number of Plugins"
	client:only="svelte"
/>

{
	licenses.descriptions.permissions.map(x => (
		<p>
			<strong>{x.label}</strong>: {x.description}
		</p>
	))
}

<h4>Conditions</h4>

<p>A number of plugins impose the following conditions.</p>

<BarChart
	dataPoints={Object.values(licenseConditions)}
	labels={conditionsLabels}
	isPercentual={false}
	aspectRatio={2}
	logScale={false}
	seriesName="Number of Plugins"
	client:only="svelte"
/>

{
	licenses.descriptions.conditions.map(x => (
		<p>
			<strong>{x.label}</strong>: {x.description}
		</p>
	))
}

<h4>Limitations</h4>

<p>A number of plugins impose the following limitations.</p>

<BarChart
	dataPoints={Object.values(licenseLimitations)}
	labels={limitaionsLabels}
	isPercentual={false}
	aspectRatio={2}
	logScale={false}
	seriesName="Number of Plugins"
	client:only="svelte"
/>

{
	licenses.descriptions.limitations.map(x => (
		<p>
			<strong>{x.label}</strong>: {x.description}
		</p>
	))
}

<!--<h3>Typescript Usage</h3>-->

<!--<p>The number of plugins that use Typescript.</p>-->

<!--<PieChart dataPoints={usesTsChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<!--<BarChart-->
<!--	dataPoints={usesTsChartInfo.map(x => x.value)}-->
<!--	labels={usesTsChartInfo.map(x => x.label)}-->
<!--	logScale={false}-->
<!--	aspectRatio={2}-->
<!--	seriesName="Number of Plugins"-->
<!--	calculatePrecentages={true}-->
<!--	percent100={totalPluginCount}-->
<!--	client:only="svelte"-->
<!--/>-->

<h3>BRAT Beta Manifest Usage</h3>

<p>The percentage of plugins that have a BRAT beta manifest.</p>

<!--<PieChart dataPoints={hasBetaManifestChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={hasBetaManifestChartInfo.map(x => x.value)}
	labels={hasBetaManifestChartInfo.map(x => x.label)}
	logScale={false}
	aspectRatio={2}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h3>Dependencies</h3>

<h4>Package Managers Used</h4>

<p>The distribution of package managers used in plugins. The package manager is determined by the presence of a lockfile in the plugin repository.</p>

<!--<PieChart dataPoints={packageManagerChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={packageManagerChartInfo.map(x => x.value)}
	labels={packageManagerChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Code Bundler Usage</h4>

<p>
	The distribution of code bundlers used in plugins. The bundler is determined by the presence of dependencies in the plugins <code>package.json</code>.
</p>

<!--<PieChart dataPoints={installedBundlersChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={installedBundlersChartInfo.map(x => x.value)}
	labels={installedBundlersChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Developer Tooling Usage</h4>

<p>The distribution of developer tooling used in plugins.</p>

<!--<PieChart dataPoints={installedBundlersChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={installedToolingFrameworksChartInfo.map(x => x.value)}
	labels={installedToolingFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Testing Framework Usage</h4>

<p>
	The distribution of testing frameworks used in plugins. The testing frameworks usage is determined by the presence of dependencies in the plugins <code
		>package.json</code
	>.
</p>

<!--<PieChart dataPoints={installedTestingFrameworksChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={installedTestingFrameworksChartInfo.map(x => x.value)}
	labels={installedTestingFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<p>
	{noTestingFrameworkCount} ({((noTestingFrameworkCount * 100) / totalPluginCount).toFixed(2)}%) plugins use no testing framework.
</p>

<h4>Frontend Framework Usage</h4>

<p>
	The distribution of frontend frameworks used in plugins. The frontend frameworks usage is determined by the presence of dependencies in the plugins <code
		>package.json</code
	>.
</p>

<!--<PieChart dataPoints={installedTestingFrameworksChartInfo} isPercentual={false} calculatePrecentages={true} client:only="svelte" />-->
<BarChart
	dataPoints={installedFrontendFrameworksChartInfo.map(x => x.value)}
	labels={installedFrontendFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<p>
	{noFrontendFrameworkCount} ({((noFrontendFrameworkCount * 100) / totalPluginCount).toFixed(2)}%) plugins use no frontend framework.
</p>

<h4>Most Used Dependencies</h4>

<p>This table shows direct dependencies of all plugins, sorted by how many plugins use them. Dependencies with less than 10 usages are not shown.</p>

<table>
	<thead>
		<tr>
			<th> Name</th>
			<th> Usage Count</th>
			<th> Usage Percentage</th>
		</tr>
	</thead>
	<tbody>
		{
			limitedMostUsedDepsChartInfo.map(x => (
				<tr>
					<td>{x.label}</td>
					<td>{x.value}</td>
					<td>{((x.value * 100) / totalPluginCount).toFixed(2)}%</td>
				</tr>
			))
		}
	</tbody>
</table>
