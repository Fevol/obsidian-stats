---
import type { PluginRepoDataNonNull } from '../../../../src/pluginRepo/types';
import BarChart from '../svelte/genericCharts/barChart.svelte';
import { arrayIntersect, groupBy, multiGroupBy } from '../../../../src/utils';
import { getRepoData } from '../../utils/base';

const repoData = await getRepoData();

const repoDataWithRepos = repoData.filter(x => x.repo !== undefined) as PluginRepoDataNonNull[];

const totalPluginCount = repoDataWithRepos.length;

const packageManagerInfo = groupBy(repoDataWithRepos, x => x.repo.packageManager ?? 'undefined');
const packageManagerChartInfo = Object.entries(packageManagerInfo)
	.map(([key, value]) => {
		if (key === 'undefined') {
			key = 'No Lockfile found';
		}
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const installedBundlersInfo = multiGroupBy(repoDataWithRepos, x => {
	return x.repo.installedBundlers;
});
const installedBundlersChartInfo = Object.entries(installedBundlersInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const installedTestingFrameworksInfo = multiGroupBy(repoDataWithRepos, x => {
	return x.repo.installedTestingFrameworks;
});

const installedTestingFrameworksChartInfo = Object.entries(installedTestingFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);
const noTestingFrameworkCount = repoDataWithRepos.filter(x => x.repo.installedTestingFrameworks.length === 0).length;

const frontendFrameworks = ['react', 'preact', 'svelte', 'vue', '@angular/core', 'solid-js'];
const installedFrontendFrameworksInfo = multiGroupBy(repoDataWithRepos, x => {
	return arrayIntersect([...x.repo.dependencies, ...x.repo.devDependencies], frontendFrameworks);
});

const installedFrontendFrameworksChartInfo = Object.entries(installedFrontendFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const noFrontendFrameworkCount = repoDataWithRepos.filter(
	x => arrayIntersect([...x.repo.dependencies, ...x.repo.devDependencies], frontendFrameworks).length === 0,
).length;

const installedToolingFrameworksInfo = multiGroupBy(repoDataWithRepos, x => {
	const allDeps = [...x.repo.dependencies, ...x.repo.devDependencies];
	const result = new Set<string>();

	if (allDeps.some(x => x.includes('eslint'))) {
		result.add('eslint');
	}

	if (allDeps.some(x => x.includes('prettier'))) {
		result.add('prettier');
	}

	if (allDeps.some(x => x.includes('@biomejs'))) {
		result.add('biome');
	}

	if (allDeps.some(x => x.includes('dprint'))) {
		result.add('dprint');
	}

	if (x.repo.usesTypescript) {
		result.add('typescript');
	}

	return Array.from(result);
});

const installedToolingFrameworksChartInfo = Object.entries(installedToolingFrameworksInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const mostUsedDepsInfo = multiGroupBy(repoDataWithRepos, x => {
	return [...x.repo.dependencies, ...x.repo.devDependencies];
});

const mostUsedDepsChartInfo = Object.entries(mostUsedDepsInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const limitedMostUsedDepsChartInfo = mostUsedDepsChartInfo.filter(x => x.value / totalPluginCount >= 0.01);

const hasBetaManifestInfo = groupBy(repoDataWithRepos, x => x.repo.hasBetaManifest.toString());
const hasBetaManifestChartInfo = Object.entries(hasBetaManifestInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => a.label.length - b.label.length);
---

<h3>BRAT Beta Manifest Usage</h3>

<p>The percentage of plugins that have a BRAT beta manifest.</p>

<BarChart
	dataPoints={hasBetaManifestChartInfo.map(x => x.value)}
	labels={hasBetaManifestChartInfo.map(x => x.label)}
	logScale={false}
	aspectRatio={2}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h3>Dependencies</h3>

<h4>Package Managers Used</h4>

<p>The distribution of package managers used in plugins. The package manager is determined by the presence of a lockfile in the plugin repository.</p>

<BarChart
	dataPoints={packageManagerChartInfo.map(x => x.value)}
	labels={packageManagerChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Code Bundler Usage</h4>

<p>
	The distribution of code bundlers used in plugins. The bundler is determined by the presence of dependencies in the plugins <code>package.json</code>.
</p>

<BarChart
	dataPoints={installedBundlersChartInfo.map(x => x.value)}
	labels={installedBundlersChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Developer Tooling Usage</h4>

<p>The distribution of developer tooling used in plugins.</p>

<BarChart
	dataPoints={installedToolingFrameworksChartInfo.map(x => x.value)}
	labels={installedToolingFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<h4>Testing Framework Usage</h4>

<p>
	The distribution of testing frameworks used in plugins. The testing frameworks usage is determined by the presence of dependencies in the plugins <code
		>package.json</code
	>.
</p>

<BarChart
	dataPoints={installedTestingFrameworksChartInfo.map(x => x.value)}
	labels={installedTestingFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<p>
	{noTestingFrameworkCount} ({((noTestingFrameworkCount * 100) / totalPluginCount).toFixed(2)}%) plugins use no testing framework.
</p>

<h4>Frontend Framework Usage</h4>

<p>
	The distribution of frontend frameworks used in plugins. The frontend frameworks usage is determined by the presence of dependencies in the plugins <code
		>package.json</code
	>.
</p>

<BarChart
	dataPoints={installedFrontendFrameworksChartInfo.map(x => x.value)}
	labels={installedFrontendFrameworksChartInfo.map(x => x.label)}
	logScale={false}
	seriesName="Number of Plugins"
	calculatePrecentages={true}
	percent100={totalPluginCount}
	client:only="svelte"
/>

<p>
	{noFrontendFrameworkCount} ({((noFrontendFrameworkCount * 100) / totalPluginCount).toFixed(2)}%) plugins use no frontend framework.
</p>

<h4>Most Used Dependencies</h4>

<p>This table shows direct dependencies of all plugins, sorted by how many plugins use them. Dependencies with less than one percent usage are not shown.</p>

<table>
	<thead>
		<tr>
			<th> Name</th>
			<th> Usage Count</th>
			<th> Usage Percentage</th>
		</tr>
	</thead>
	<tbody>
		{
			limitedMostUsedDepsChartInfo.map(x => (
				<tr>
					<td>{x.label}</td>
					<td>{x.value}</td>
					<td>{((x.value * 100) / totalPluginCount).toFixed(2)}%</td>
				</tr>
			))
		}
	</tbody>
</table>
