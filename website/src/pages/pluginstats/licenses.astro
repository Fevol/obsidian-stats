---
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { getRepoData, projectRelativeUrl } from '../../utils/base';
import { groupBy } from '../../../../src/utils';
import type { PluginRepoDataNonNull } from '../../../../src/pluginRepo/types';
import { promises as fs } from 'fs';
import type { Licenses } from '../../../../src/license';
import BarChart from '../../components/svelte/genericCharts/barChart.svelte';

const repoData = await getRepoData();

const repoDataWithRepos = repoData.filter(x => x.repo !== undefined) as PluginRepoDataNonNull[];

const totalPluginCount = repoDataWithRepos.length;

const licenceInfo = groupBy(repoDataWithRepos, x => x.repo.licenseFile);

const licenceChartInfo = Object.entries(licenceInfo)
	.map(([key, value]) => {
		return {
			label: key,
			value: value.length,
		};
	})
	.sort((a, b) => b.value - a.value);

const licenceChartSmallInfo = Object.entries(licenceInfo)
	.map(([key, value]) => {
		if (value.length < 100) {
			return {
				label: key,
				value: value.length,
			};
		}
		return undefined;
	})
	.filter(x => x !== undefined)
	.sort((a, b) => b.value - a.value);

const licensePermissions: Record<string, number> = {};
const licenseConditions: Record<string, number> = {};
const licenseLimitations: Record<string, number> = {};

const licenses: Licenses = JSON.parse(await fs.readFile(projectRelativeUrl('../licenses.json'), 'utf-8'));

for (const permission of licenses.permissions) {
	licensePermissions[permission] = 0;
}

for (const condition of licenses.conditions) {
	licenseConditions[condition] = 0;
}

for (const limitation of licenses.limitations) {
	licenseLimitations[limitation] = 0;
}

for (const li of licenceChartInfo) {
	const license = licenses.licenses.find(x => x['spdx-id'] === li.label);
	if (license !== undefined) {
		for (const permission of license.permissions) {
			licensePermissions[permission] += li.value;
		}

		for (const condition of license.conditions) {
			licenseConditions[condition] += li.value;
		}

		for (const limitation of license.limitations) {
			licenseLimitations[limitation] += li.value;
		}
	}
}

const permissionsLabels = Object.keys(licensePermissions).map(x => licenses.descriptions.permissions.find(y => y.tag === x)!.label);
const conditionsLabels = Object.keys(licenseConditions).map(x => licenses.descriptions.conditions.find(y => y.tag === x)!.label);
const limitaionsLabels = Object.keys(licenseLimitations).map(x => licenses.descriptions.limitations.find(y => y.tag === x)!.label);
---

<StarlightPage
    frontmatter={{
        title: 'Plugin Licenses',
        description: `An overview over the different licenses that plugins use.`
    }}
    headings={[
        { depth: 2, text: 'License Usage', slug: 'license-usage' },
        { depth: 2, text: 'License Terms', slug: 'license-terms' },
        { depth: 3, text: 'Permissions', slug: 'permissions' },
        { depth: 3, text: 'Conditions', slug: 'conditions' },
        { depth: 3, text: 'Limitations', slug: 'limitations' },
    ]}
>

    <p>
        Licenses are important, they protect the authors work and give you as a user certain guarantees and limitations. 
        It's important to know what you can and can't do with a plugin, such as redistributing it, modifying it, or using it in a commercial context.
        Another developer might want to continue development of an abandoned plugin, but if he is allowed depends on the license.
        This page gives you an overview over the different licenses that plugins use.
    </p>

    <p>
        Licenses are extracted from <code>LICENSE</code> file in each plugin repository. 
        The license text is then compared to a set of known licenses to determine the license.
        This process uses similarity matching, so the result may not be accurate.
    </p>

    <h2 id="license-usage">License Usage</h2>

    <p>
        The following chart shows the distribution of licenses in the plugins.
    </p>

    <p>
        <code>not found</code> means that a no license file was found in the repository. 
        Obsidian <a href="https://docs.obsidian.md/Developer+policies#Copyright+and+licensing" target="_blank">requires a license file to be present</a> for new plugins, but this is not enforced retroactively.
    </p>

    <p>
        <code>unknown</code> means that a license file was found, but the license could not be identified.
    </p>

    <BarChart
        dataPoints={licenceChartInfo.map(x => x.value)}
        labels={licenceChartInfo.map(x => x.label)}
        logScale={false}
        seriesName="Number of Plugins with a specific license"
        calculatePrecentages={true}
        percent100={totalPluginCount}
        client:only="svelte"
    />

    <p>Licenses that are used by more than 100 plugins are excluded from the chart below.</p>

    <BarChart
        dataPoints={licenceChartSmallInfo.map(x => x.value)}
        labels={licenceChartSmallInfo.map(x => x.label)}
        logScale={false}
        seriesName="Number of Plugins with a specific license"
        calculatePrecentages={true}
        percent100={totalPluginCount}
        client:only="svelte"
    />

    <h2 id="license-terms">License Terms</h2>

    <p>The following charts show the distribution of license terms in the plugins. The terms are based on the licenses shown in the charts above.</p>

    <h3 id="permissions">Permissions</h3>

    <p>A number of plugins give the following permissions.</p>

    <BarChart
        dataPoints={Object.values(licensePermissions)}
        labels={permissionsLabels}
        aspectRatio={2}
        logScale={false}
        seriesName="Number of Plugins that give permission"
        calculatePrecentages={true}
        percent100={totalPluginCount}
        client:only="svelte"
    />

    {
        licenses.descriptions.permissions.map(x => (
            <p>
                <strong>{x.label}</strong>: {x.description}
            </p>
        ))
    }

    <h3 id="conditions">Conditions</h3>

    <p>A number of plugins impose the following conditions.</p>

    <BarChart
        dataPoints={Object.values(licenseConditions)}
        labels={conditionsLabels}
        aspectRatio={2}
        logScale={false}
        seriesName="Number of Plugins that impose the condition"
        calculatePrecentages={true}
        percent100={totalPluginCount}
        client:only="svelte"
    />

    {
        licenses.descriptions.conditions.map(x => (
            <p>
                <strong>{x.label}</strong>: {x.description}
            </p>
        ))
    }

    <h3 id="limitations">Limitations</h3>

    <p>A number of plugins impose the following limitations.</p>

    <BarChart
        dataPoints={Object.values(licenseLimitations)}
        labels={limitaionsLabels}
        aspectRatio={2}
        logScale={false}
        seriesName="Number of Plugins that impose the limitation"
        calculatePrecentages={true}
        percent100={totalPluginCount}
        client:only="svelte"
    />

    {
        licenses.descriptions.limitations.map(x => (
            <p>
                <strong>{x.label}</strong>: {x.description}
            </p>
        ))
    }

</StarlightPage>